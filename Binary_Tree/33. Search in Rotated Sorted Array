class Solution {
public:
    
    
    int BS(vector<int> nums, int low, int high, int target){
        while(low <= high){
            int mid = low + ( high - low)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        
        return -1;
    }
    
    int mn(vector<int>nums){    //OR we make function of number of rotation
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        
        while(start <= end){
            int mid = start + (end - start)/2;
            int next = (mid + 1)%n;
            int prev = (mid - 1 + n)%n;
            
            if((nums[mid] <= nums[next]) && (nums[mid] <= nums[prev])){
                return mid;
            }
            else if(nums[0] <= nums[mid]){  // left side is sorted hence we move to right side
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        return 0;
    }
    
    int search(vector<int>& nums, int target) {
        
        int min_index = mn(nums);  // find index of min element
        int left = BS(nums, 0, min_index - 1, target); // check target in left part of min element, since it's sorted
        int right = BS(nums, min_index, nums.size() - 1, target); // check target in right part of min element including min element, since it's sorted
        
        if(left == -1 && right == -1){
            return -1;
        }
        else if(left == -1){
            return right;
        }
        else{
            return left;
        }
        return 0;
    }
};
