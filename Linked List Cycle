/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        
//         if(head == NULL || head->next == NULL){
//             return false;
//         }
        
//         do{
//             if(fast == NULL || slow == NULL){
//                 return false;
//             }
            
//             slow = slow->next;
//             fast = fast->next;
            
//             if(fast != NULL){
//                 fast = fast->next;
//             }
//             else{
//                 return false;
//             }
//         }while(fast != slow);
        
//         return true;
        
        // OR //
        
        if(head == NULL || head->next == NULL){
            return false;
        }
        
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            if(fast == slow){
                return true;
            }
        }
        
        return false;
    }
};
