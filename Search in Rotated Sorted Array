class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size() - 1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            if(nums[mid] == target){
                return mid;
            }
            
            //the left side is sorted
            if(nums[low] <= nums[mid]){
                //figure out if element is present on left half or not
                if(target >= nums[low] && target <= nums[mid]){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                }
            }
            
            //right side is sorted
            else{
                //figure out if element is present on right half or not
                if(target >= nums[mid] && target <= nums[high]){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
        }
        
        return -1;
    }
};

-------------------------------------------------------------OR----------------------------------------------------------

int mid;
        int l = 0;
        int r = nums.size() - 1;
        
        while(l <= r){
            mid = l + (r - l)/2;
            if(nums[mid] >= nums[0]){
                if(target >= nums[0]){
                    if(nums[mid] == target){
                        return mid;
                    }
                    else if(nums[mid] > target){
                        r = mid - 1;
                    }
                    else{
                        l = mid + 1;
                    }
                }
                else{
                    l = mid+1;
                }
            }
            else{
                if(target < nums[0]){
                    if(nums[mid] == target){
                        return mid;
                    }
                    else if(nums[mid] > target){
                        r = mid - 1;
                    }
                    else{
                        l = mid + 1;
                    }
                }
                else{
                    r = mid - 1;
                }
            }
        }
        
        return -1;
