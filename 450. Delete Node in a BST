/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insucc(TreeNode* root, int key){
        TreeNode* temp = NULL;
            
        while(root != NULL){
            if(key >= root->val){
                root = root->right;
            }
            else{
                temp = root;
                root = root->left;
            }
        }
        return temp;
    
    }
    
    TreeNode* deleteNode(TreeNode* root, int key) {
        // Leaf Node
        // Only Left ot Right exists
        // Both exists
        
        if(root != NULL){
            if(key > root->val){
                root->right = deleteNode(root->right, key);
            }
            else if(key < root->val){
                root->left = deleteNode(root->left, key);
            }
            else{
                if(root->right == NULL){
                    TreeNode* temp = root->left;
                    delete(root);
                    return temp;
                }
                else if(root->left == NULL){
                    TreeNode* temp = root->right;
                    delete(root);
                    return temp;
                }
                else{
                    TreeNode* temp = insucc(root, key);
                    swap(temp->val, root->val);
                    root->right = deleteNode(root->right, key);
                }
            }
        }
        
        return root;
    }
};
