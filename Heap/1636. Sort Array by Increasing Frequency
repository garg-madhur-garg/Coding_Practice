// #define pi pair<int, int>
// class Solution {
// public:
    
//     struct sort{
//         bool operator()(pi &a, pi &b){
//             if(a.first < b.first){
//                 return true;
//             }
//             else if(a.first == b.first){
//                 if(a.second < b.second){
//                     return false;
//                 }
//                 else{
//                     return true;
//                 }
//             }
//             else{
//                 return false;
//             }
//         }    
//     };
    
//     vector<int> frequencySort(vector<int>& nums) {
//         unordered_map<int, int> mp;
//         vector<int>ans;
        
//         for(int i = 0; i < nums.size(); i++){
//             mp[nums[i]]++;
//         }
        
//         priority_queue<pi, vector<pi>, sort >minH;
        
//         for(auto i = mp.begin(); i != mp.end(); i++){
//             minH.push({i->second, i->first});
//         }
        
//         while(minH.empty() == false){
//             int fst = minH.top().first;
            
//             while(fst--){
//                 ans.push_back(minH.top().second);
//             }
//             minH.pop();
//         }
        
//         reverse(ans.begin(), ans.end());
//         return ans;
        
//     }
    
// };


// ------------------OR-------------------------


class Solution {
public:
    
    vector<int> frequencySort(vector<int>& nums) {
        unordered_map<int, int> mp;
        vector<int>ans;
        
        for(int i = 0; i < nums.size(); i++){
            mp[nums[i]]++;
        }
        
        priority_queue<pair<int, int> >minH;
        
        for(auto i = mp.begin(); i != mp.end(); i++){
            minH.push({-(i->second), i->first});
        }
        
        while(minH.empty() == false){
            int fst = -minH.top().first;
            
            while(fst--){
                ans.push_back(minH.top().second);
            }
            minH.pop();
        }
        
        return ans;
        
    }
    
};
