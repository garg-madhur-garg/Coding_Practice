class Solution {
  public:

    int findTargetSumWays(vector<int>&A ,int target) {
        //Your code here
        // s1 - s2 = target/
        // s1 + s2 = sum of array
        int sum = 0;
        int n = A.size();
        for(int i = 0; i < n; i++){
            sum = sum + A[i];
        }
        
        // target = abs(target);
        if((sum + target)%2 != 0){
            return 0;
        }
        
        int s1 = (target + sum)/2;
        
        // Now question becomes
        // No. of subsets having sum s1
        // countSubsetSum
        
        int t[n + 1][s1 + 1];
        
        for(int i = 0; i < n+1; i++){
            for(int j = 0; j < s1 + 1; j++){
                if(i == 0){
                    t[i][j] = 0;
                }
                if(j == 0){
                    t[i][j] = 1;
                }
            }
        }
        
        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < s1 + 1; j++){
                if(A[i - 1] <= j){
                    t[i][j] = t[i - 1][j-A[i-1]] + t[i - 1][j];
                }
                else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        
        return t[n][s1];
    }
};
